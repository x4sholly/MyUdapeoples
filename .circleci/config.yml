version: 2.1

parameters:
  workflow_id:
    type: string
    default:  "${CIRCLE_WORKFLOW_ID}"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      circle_workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying Environment: << parameters.circle_workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.circle_workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.circle_workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.circle_workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      circle_workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/C5WRVAbjmRkg861XpQ5mW/migration_<< parameters.circle_workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migration:revert
            fi

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command:  |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install  
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command:  |
            python3 -m pip install --user ansible
  install_nodejs:
    description:  Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js
          command:  |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
             
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build 

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image:  cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command:  |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople 
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image:  cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["b6:b4:1d:59:ed:e9:32:45:fb:62:ef:0c:b1:fb:02:46"]
      - attach_workspace:
          at: ~/
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image:  python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command:  |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command:  |
            cd backend
            npm install
            npm run build
            npm run migrations >> migrations.txt
            # cat migrations.txt
      - run:
          name: Send migration results to kvdb.io
          command:  |
            if grep -q "has been executed successfully." ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/C5WRVAbjmRkg861XpQ5mW/migration_${CIRCLE_WORKFLOW_ID:0:7} -d  '1'
            fi
      # - save_cache:
      #     paths:  [backend/node_modules]
      #     key:  backend-build
      - destroy-environment:
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      #- revert-migrations:
      #    circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # run-migrations:
  #   docker:
  #     - image:  cimg/python:3.10
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - restore_cache:
  #         keys: [backend-build]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Run migrations
  #         command:  |
  #           cd backend
  #           npm install
  #           npm run build
  #           npm run migrations > migrations.txt
  #           # cat migrations.txt
  #     - run:
  #         name: Send migration results to kvdb.io
  #         command:  |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations.txt
  #           then
  #             curl https://kvdb.io/C5WRVAbjmRkg861XpQ5mW/migration_${CIRCLE_WORKFLOW_ID:0:7} -d  '1'
  #           fi
  #     - save_cache:
  #         paths:  [backend/node_modules]
  #         key:  backend-build
  #     - destroy-environment:
  #         circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     #- revert-migrations:
  #     #    circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

# KC
# s


deploy-frontend:
    docker:
      - image:  python:3.7-alpine3.16
    steps:
      - checkout
      # - install_awscli
      # - install_nodejs
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli
            # cd frontend
            # npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \ 
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          keys: [frontend-build] 

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations: 
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"




  # deploy-frontend:
  #   docker:
  #     - image:  cimg/python:3.10
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - restore_cache:
  #         keys: [frontend-build] 
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           cd frontend
  #           npm install
  #     - run:
  #         name: Get backend url
  #         command: |
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           npm update
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy-environment:
  #         circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     # - revert-migrations: 
  #     #     circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image:  cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints:  ["b6:b4:1d:59:ed:e9:32:45:fb:62:ef:0c:b1:fb:02:46"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Compile backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations: 
          circle_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # #    filters:
      # #      branches:
      # #        only: [master]
      - configure-infrastructure
          # requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]

